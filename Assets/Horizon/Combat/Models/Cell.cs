//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Horizon.Core;
using UnityEngine;
using Horizon.Core.WeakSubscription;
using System.Linq;


namespace Horizon.Combat.Models
{
	[Flags]
	// all the differant types of highlights, and their priority
	public enum LogicalHighlightState
	{
		// values must be power of two
		// lower valus have lower priority
		None = 0,
		MovementRange = 1,
		MovementPath = 2,
		TargetingRange = 4,
		EffectRange = 8
	}

	public static class LogicalHighlightStateExtension
	{
		public static void EnableHighlightState(this LogicalHighlightState self, LogicalHighlightState other)
		{
			self |= other;
		}

		public static void DisableHighlightState(this LogicalHighlightState self, LogicalHighlightState other)
		{
			self ^= other; 
		}

		public static bool stateIsEnabled(this LogicalHighlightState self, LogicalHighlightState other)
		{
			return (self & other) == other;
		}

		public static LogicalHighlightState EffectiveHighlightState(this LogicalHighlightState self)
		{
			//set to the lowest priority
			LogicalHighlightState effectiveState = LogicalHighlightState.None;

			foreach(var State in Enum.GetValues(typeof(LogicalHighlightState)).Cast<LogicalHighlightState>())
			{
				if((int)State > (int)effectiveState &&  self.stateIsEnabled(State)) effectiveState = State;
			}

			return effectiveState;
		}
	}

	public class Cell : ModelBase
	{		
		public LogicalHighlightState HighlightState = LogicalHighlightState.None;

		//can the cell be walked over
		public bool Passable
		{
			get
			{
				return m_passableSerilized;
			}
			set
			{
				SetPropertyFeild(ref m_passableSerilized,value,() => Passable);
			}
		}

		[HideInInspector]
		public GridPoint GridPosition
		{
			get
			{
				return m_gridPositionSerilized;
			}
			set
			{
				if(SetPropertyFeild(ref m_gridPositionSerilized, value,() => GridPosition))
				{
					gameObject.name = "(" + GridPosition.x + "," + GridPosition.y + ")";
					transform.localPosition = new Vector3(GridPosition.x + 0.5f,0,GridPosition.y + 0.5f);
				}
			}
		}

		[HideInInspector]
		public Grid grid
		{
			get
			{
				return m_gridSerilized;
			}
			set
			{
				if(SetPropertyFeild(ref m_gridSerilized, value,() => grid))
				{
					transform.localPosition = new Vector3(GridPosition.x + 0.5f,0,GridPosition.y + 0.5f);
				}
			}
		}

		[SerializeField]
		private bool m_passableSerilized;

		[SerializeField]
		private GridPoint m_gridPositionSerilized;

		[SerializeField]
		private Grid m_gridSerilized;
	}
}

