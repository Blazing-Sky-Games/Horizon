//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Linq;
using System.Reflection;
using UnityEditor;
using UnityEngine;
using Horizon.Core.ExtensionMethods;
using Horizon.Core.WeakSubscription;
using System.Collections.Generic;


namespace Horizon.Core.Editor
{
	public class HorizonEditorUtility
	{
		static HorizonEditorUtility()
		{
			foreach(Assembly assembly in AppDomain.CurrentDomain.GetAssemblies())
			{
				foreach(Type type in assembly.GetTypes())
				{
					CustomDrawerAtribute atrib = (CustomDrawerAtribute)type.GetCustomAttributes(typeof(CustomDrawerAtribute),false).FirstOrDefault();
					if(atrib != null)
					{
						customDrawFunctions[atrib.type] = (CustomDrawer)Activator.CreateInstance(type);
					}
				}
			}
		}

		private class MemberValueWrapper
		{
			public readonly Type ValueType;
			public readonly Action<object> set;
			public readonly Func<object> get;
			public readonly string Name;
			
			public MemberValueWrapper(PropertyInfo info, object target)
			{
				ValueType = info.PropertyType;
				set = (obj) => info.GetSetMethod().Invoke(target,new object[]{obj});
				get = () => info.GetValue(target,null);
				Name = info.Name;
			}
			
			public MemberValueWrapper(FieldInfo info, object target)
			{
				ValueType = info.FieldType;
				set = (obj) => info.SetValue(target,obj);
				get = () => info.GetValue(target);
				Name = info.Name;
			}
		}

		private static void Display<T>(MemberValueWrapper value, Func<string,T,GUILayoutOption[],T> DisplayFunction)
		{
			value.set(DisplayFunction(value.Name.SplitCamelCase(),(T)value.get(),new GUILayoutOption[]{}));
		}

		private static void DisplayMemberValue(MemberValueWrapper memberValue)
		{
			//TODO add ability to extend what classes can be shown, from outside this file
			
			// display value editor ui based on property type
			if(memberValue.ValueType == typeof(Bounds))
			{
				Display<Bounds>(memberValue, EditorGUILayout.BoundsField);
			}
			else if(memberValue.ValueType == typeof(Color))
			{
				Display<Color>(memberValue, EditorGUILayout.ColorField);
			}
			else if(memberValue.ValueType == typeof(AnimationCurve))
			{
				if(memberValue.get() != null)
					Display<AnimationCurve>(memberValue, EditorGUILayout.CurveField);
			}
			else if(memberValue.ValueType == typeof(double))
			{
				Display<double>(memberValue, EditorGUILayout.DoubleField);
			}
			else if(memberValue.ValueType.IsEnum)
			{
				if(memberValue.ValueType.GetCustomAttributes(typeof(FlagsAttribute),true).Length > 0)
				{
					Display<Enum>(memberValue, EditorGUILayout.EnumMaskField);
				}
				else
				{
					Display<Enum>(memberValue, EditorGUILayout.EnumPopup);
				}
			}
			else if(memberValue.ValueType == typeof(float))
			{
				Display<float>(memberValue, EditorGUILayout.FloatField);
			}
			else if(memberValue.ValueType == typeof(int))
			{
				Display<int>(memberValue, EditorGUILayout.IntField);
			}
			else if(memberValue.ValueType == typeof(LayerMask))
			{
				Display<LayerMask>(memberValue, (label,layer,options) => (LayerMask)EditorGUILayout.LayerField(label,layer.value,options));
			}
			else if(memberValue.ValueType == typeof(long))
			{
				Display<long>(memberValue, EditorGUILayout.LongField);
			}
			else if(memberValue.ValueType == typeof(Rect))
			{
				Display<Rect>(memberValue, EditorGUILayout.RectField);
			}
			else if(memberValue.ValueType == typeof(string))
			{
				Display<string>(memberValue, EditorGUILayout.TextField);
			}
			else if(memberValue.ValueType == typeof(bool))
			{
				Display<bool>(memberValue, EditorGUILayout.Toggle);
			}
			else if(memberValue.ValueType == typeof(Vector2))
			{
				Display<Vector2>(memberValue, EditorGUILayout.Vector2Field);
			}
			else if(memberValue.ValueType == typeof(Vector3))
			{
				Display<Vector3>(memberValue, EditorGUILayout.Vector3Field);
			}
			else if(memberValue.ValueType == typeof(Vector4))
			{
				Display<Vector4>(memberValue, EditorGUILayout.Vector4Field);
			}
			else if( memberValue.ValueType == typeof(UnityEngine.Object) || memberValue.ValueType.IsSubclassOf(typeof(UnityEngine.Object)))
			{
				Display<UnityEngine.Object>(memberValue, (label,obj,options) => EditorGUILayout.ObjectField(label,obj,memberValue.ValueType,true,options));
			}
			else if(memberValue.ValueType == typeof(EventName))
			{
				//todo
			}
			else if(customDrawFunctions.ContainsKey(memberValue.ValueType))
			{
				memberValue.set(customDrawFunctions[memberValue.ValueType].Draw(memberValue.Name.SplitCamelCase(),memberValue.get()));
			}
			else
			{
				EditorGUILayout.LabelField(memberValue.Name.SplitCamelCase(),"cannot display");
			}
			//todo, list, type, delegate
		}

		public static void DisplayMemberValue(FieldInfo info, object target)
		{
			DisplayMemberValue(new MemberValueWrapper(info, target));
		}

		public static void DisplayMemberValue(PropertyInfo info, object target)
		{
			DisplayMemberValue(new MemberValueWrapper(info, target));
		}

		private static Dictionary<Type, CustomDrawer> customDrawFunctions = new Dictionary<Type, CustomDrawer>();
	}
}

